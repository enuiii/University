import numpy as np
import matplotlib.pyplot as plt

def solve_collision_with_stop(mass1, mass2, velocity1, velocity2, which_stops):
    """
    Решает задачу о частично упругом столкновении с остановкой одного из шаров.
    """
    if which_stops == 'first':
        # Первый шар останавливается (v1' = 0)
        v2_prime = (mass1 * velocity1 + mass2 * velocity2) / mass2
        e = v2_prime / (velocity1 - velocity2) if velocity1 != velocity2 else 0
        return 0, v2_prime, e
    
    elif which_stops == 'second':
        # Второй шар останавливается (v2' = 0)
        v1_prime = (mass1 * velocity1 + mass2 * velocity2) / mass1
        e = -v1_prime / (velocity1 - velocity2) if velocity1 != velocity2 else 0
        return v1_prime, 0, e

def calculate_energies(mass1, mass2, vel1, vel2, vel1_prime, vel2_prime):
    """Вычисляет энергии до и после столкновения"""
    E_initial = 0.5 * mass1 * vel1**2 + 0.5 * mass2 * vel2**2
    E_final = 0.5 * mass1 * vel1_prime**2 + 0.5 * mass2 * vel2_prime**2
    return E_initial, E_final

def analyze_collision(mass1, mass2, vel1, vel2, which_stops):
    """Анализирует столкновение и выводит результаты"""
    print(f"\n{'='*80}")
    print(f"АНАЛИЗ СТОЛКНОВЕНИЯ:")
    print(f"{'='*80}")
    
    print(f"ДО СТОЛКНОВЕНИЯ:")
    print(f"Шар 1: масса = {mass1} кг, скорость = {vel1} м/с ({'вправо' if vel1 > 0 else 'влево' if vel1 < 0 else 'покоится'})")
    print(f"Шар 2: масса = {mass2} кг, скорость = {vel2} м/с ({'вправо' if vel2 > 0 else 'влево' if vel2 < 0 else 'покоится'})")
    print(f"Относительная скорость: {abs(vel1 - vel2):.1f} м/с")
    
    # Вычисляем скорости после столкновения
    v1_prime, v2_prime, e = solve_collision_with_stop(mass1, mass2, vel1, vel2, which_stops)
    E_i, E_f = calculate_energies(mass1, mass2, vel1, vel2, v1_prime, v2_prime)
    
    print(f"\nПОСЛЕ СТОЛКНОВЕНИЯ (останавливается {'первый' if which_stops == 'first' else 'второй'} шар):")
    print(f"Шар 1: скорость = {v1_prime:.2f} м/с ({'вправо' if v1_prime > 0 else 'влево' if v1_prime < 0 else 'остановился'})")
    print(f"Шар 2: скорость = {v2_prime:.2f} м/с ({'вправо' if v2_prime > 0 else 'влево' if v2_prime < 0 else 'остановился'})")
    
    print(f"\nФИЗИЧЕСКИЕ ПАРАМЕТРЫ:")
    print(f"Коэффициент восстановления: e = {e:.3f}")
    if 0 <= e <= 1:
        print(f"✓ Столкновение физически реализуемо (e ∈ [0, 1])")
    else:
        print(f"⚠️  Столкновение физически нереализуемо (e ∉ [0, 1])")
    
    print(f"Начальная энергия: {E_i:.2f} Дж")
    print(f"Конечная энергия: {E_f:.2f} Дж")
    print(f"Потеря энергии: {E_i - E_f:.2f} Дж ({((E_i - E_f)/E_i*100):.1f}%)")
    
    return v1_prime, v2_prime, e, E_i, E_f

def visualize_collision(vel1, vel2, v1_prime, v2_prime):
    """Визуализирует скорости до и после столкновения"""
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
    
    # До столкновения
    ax1.barh(['Шар 1', 'Шар 2'], [vel1, vel2], color=['blue', 'red'])
    ax1.axvline(x=0, color='black', linestyle='--', alpha=0.5)
    ax1.set_xlabel('Скорость (м/с)')
    ax1.set_title('Скорости ДО столкновения')
    ax1.grid(True, alpha=0.3)
    
    # После столкновения
    ax2.barh(['Шар 1', 'Шар 2'], [v1_prime, v2_prime], color=['lightblue', 'lightcoral'])
    ax2.axvline(x=0, color='black', linestyle='--', alpha=0.5)
    ax2.set_xlabel('Скорость (м/с)')
    ax2.set_title('Скорости ПОСЛЕ столкновения')
    ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    print("СТОЛКНОВЕНИЕ ДВУХ ШАРОВ, ДВИЖУЩИХСЯ НАВСТРЕЧУ ДРУГ ДРУГУ")
    print("После столкновения один из шаров останавливается")
    print("="*80)
    
    # Параметры столкновения
    m1, m2 = 2, 3      # массы шаров
    v1, v2 = 8, -5     # скорости (v2 отрицательная - движение навстречу)
    which_stops = 'second'  # останавливается второй шар
    
    # Анализ столкновения
    v1_prime, v2_prime, e, E_i, E_f = analyze_collision(m1, m2, v1, v2, which_stops)
    
    # Визуализация
    print(f"\nВизуализация скоростей...")
    visualize_collision(v1, v2, v1_prime, v2_prime)
    
    # Дополнительный анализ
    print(f"\nДОПОЛНИТЕЛЬНЫЙ АНАЛИЗ:")
    print(f"Импульс до: {m1*v1 + m2*v2:.1f} кг·м/с")
    print(f"Импульс после: {m1*v1_prime + m2*v2_prime:.1f} кг·м/с")
    print(f"Сохранение импульса: {'✓' if abs((m1*v1 + m2*v2) - (m1*v1_prime + m2*v2_prime)) < 1e-10 else '✗'}")